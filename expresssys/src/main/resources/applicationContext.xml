<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc" 
	
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
           http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-2.5.xsd
           http://www.springframework.org/schema/aop 
           http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
           http://www.springframework.org/schema/tx 
           http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
           http://www.springframework.org/schema/mvc 
           http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
           ">
    <!-- 混合配置: 1. 开启包扫描，即读取包下带有注解的类，并托管 -->
	<context:component-scan base-package="com.yc" />
	<!-- 开启spring mvc的注解解析 -->
	<mvc:annotation-driven />

	<!-- 开启aspectj的自动代理机制 -->
	<aop:aspectj-autoproxy />
	
	<!-- 读取属性配置文件 -->
	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations" value="classpath*:*.properties" />
	</bean> 
	
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>
	
	<!-- 在这个 sqlSessionFactory中，主要要完成读取 mybatis的配置文件的工作 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="typeAliasesPackage" value="com/yc/bean" />
		<property name="mapperLocations" value="classpath*:com/yc/bean/*.xml" />
		<property name="configurationProperties">
			<props>
				<prop key="logImpl">LOG4J</prop>
			</props>
		</property>

	</bean>    
	
	<!-- 通过工厂创建 session -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>  
           
	<!-- 事务管理器, mybatis采用了jdbc事务管理器... 其它框架不同的事务管理器 -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<tx:annotation-driven transaction-manager="txManager" />
	
	<!-- ##########################定时任务调度####################### 
	<bean id="myJob" class=""></bean>
	
	<bean id="jobDetail"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">   
		<property name="targetObject" ref="myJob" />                       
		<property name="targetMethod" value="doTask" />                                    
	</bean>

	<bean id="cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
	    <property name="jobDetail" ref="jobDetail" />
	    <property name="cronExpression" value="0,10,20,30,40,50 * * * * ?" />  
	</bean>
	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
	    <property name="triggers">
	        <list>
	            <ref bean="cronTrigger" />
	        </list>
	    </property>
	</bean>
-->


	<!-- #############邮件配置， 以aop方案实现############################## -->

    <!-- 创建一个邮件的发送类 -->
	<!--
	<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="${mail.host}"/>
	</bean>
	-->
	
	<!-- 以aop方式来发送邮件-->
	<!--
	<bean id="emailAdvice" class="邮件的业务类的全路径">
		<property name="mailSender" ref="mailSender"/>
	</bean>-->

</beans>
